// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core execution run entity
model Run {
  id           String    @id @default(cuid())
  projectId    String
  name         String
  build        String?
  environments Json?     // ["iOS 18 / iPhone 15", "Chrome 130 / Win"]
  filters      Json?     // persisted query used to select cases
  dueAt        DateTime?
  notes        String?
  createdBy    String
  createdAt    DateTime  @default(now())
  startedAt    DateTime?
  closedAt     DateTime?
  status       String    @default("draft") // draft|active|completed|archived

  // Relations
  runCases     RunCase[]

  @@map("runs")
}

// Snapshot of test cases in a run (immutable once created)
model RunCase {
  id            String   @id @default(cuid())
  runId         String
  caseId        String   // original library case id (for linking/flakiness)
  titleSnapshot String
  stepsSnapshot Json     // [{idx, description, expected}]
  assignee      String?
  status        String   @default("Not Run") // Not Run|Pass|Fail|Blocked|Skipped|Retest
  durationSec   Int?
  notes         String?
  priority      String   @default("medium") // high|medium|low
  component     String?  // for reporting
  tags          Json?    // preserved from original case
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  run           Run        @relation(fields: [runId], references: [id], onDelete: Cascade)
  runSteps      RunStep[]
  evidence      Evidence[]
  defects       Defect[]

  @@map("run_cases")
}

// Individual step execution results
model RunStep {
  id            String   @id @default(cuid())
  runCaseId     String
  idx           Int      // step number (1, 2, 3...)
  description   String   // action to perform
  expected      String   // expected result
  status        String   @default("Not Run") // Pass|Fail|NA|Not Run
  actual        String?  // actual result observed
  durationSec   Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  runCase       RunCase    @relation(fields: [runCaseId], references: [id], onDelete: Cascade)
  evidence      Evidence[]

  @@map("run_steps")
}

// Evidence/attachments for steps or cases
model Evidence {
  id            String   @id @default(cuid())
  runCaseId     String?
  runStepId     String?
  type          String   // image|video|log|link|file
  filename      String
  url           String
  size          Int?     // file size in bytes
  mimeType      String?
  description   String?
  createdBy     String
  createdAt     DateTime @default(now())

  // Relations
  runCase       RunCase? @relation(fields: [runCaseId], references: [id], onDelete: Cascade)
  runStep       RunStep? @relation(fields: [runStepId], references: [id], onDelete: Cascade)

  @@map("evidence")
}

// Defect tracking
model Defect {
  id            String   @id @default(cuid())
  runCaseId     String
  externalId    String   // e.g. JIRA-123, LINEAR-456
  system        String   // Jira|YouTrack|Linear|GitHub
  status        String   // Open|In Progress|Resolved|Closed
  severity      String?  // Critical|High|Medium|Low
  title         String?
  description   String?
  url           String?  // link to external system
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  runCase       RunCase  @relation(fields: [runCaseId], references: [id], onDelete: Cascade)

  @@map("defects")
}

// Saved filter presets for runs
model FilterPreset {
  id          String   @id @default(cuid())
  name        String
  description String?
  filters     Json     // serialized filter criteria
  isPublic    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("filter_presets")
}

// User assignments and preferences
model UserPreference {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json     // keyboard shortcuts, default views, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_preferences")
}

// Flaky test detection
model FlakyCase {
  id              String   @id @default(cuid())
  caseId          String   @unique // library case id
  flakiness       Float    // 0.0 to 1.0 (percentage of flips)
  totalRuns       Int      // total executions tracked
  flipCount       Int      // number of Pass->Fail or Fail->Pass transitions
  lastFlip        DateTime?
  isFlaky         Boolean  @default(false) // marked as flaky if above threshold
  calculatedAt    DateTime @default(now())

  @@map("flaky_cases")
}